def properties = null     

/*def loadProperties() {
    node {
        checkout scm
        properties = new Properties()
        File propertiesFile = new File("${workspace}/config.properties")
        properties.load(propertiesFile.newDataInputStream())
        echo "Immediate one ${properties.browser}"
    }
}*/

def loadProperties() {
    node {
        checkout scm
        properties = readProperties file: 'C:/Users/Administrator/AppData/Local/Jenkins/.jenkins/workspace/jenkins-properties-test@2/src/main/java/com/focus/config/config.properties'
        echo "Browser ${properties.browser}"
    }
}

pipeline {
    agent none
    
    environment {
        maven = 'default'
    }
    
    stages {
    	agent any
        
        stage ('prepare') {
            steps {
                script {
                    loadProperties()
                    echo "Browser ${properties.browser}"
                }
            }
        }
        
        stage('Initialize') {
            steps {
                echo '# starting the pipeline execution...'
            }
        }
        
        stage('Clone release') {
            steps {
                echo '# cloning the application...'
                git credentialsId: 'git-th3-ssh', url: 'https://github.com/th33ngi/java-git-pipeline-simplescript.git'
            }
        }
        
        stage('Build release') {
            steps {
                echo '# building the application...'
                bat "mvn -B -DskipTests clean install"
            }
        }
        
        stage('Run test plan') { 
            steps {
                echo '# teting the application...'
                bat 'mvn test' 
            }
        }
        
        /*stage('Deploy release') { 
            steps {
                echo '# deploying the application...'
               	bat 'mvn -B -DskipTests deploy -DaltDeploymentRepository=internal.repo::default::file:///C:/Users/Th33NGi/Documents/jenkins_deployments'
            }
        }*/
    }
    
    post {
        /*success {
            mail to: 'qastacknotifications@gmail.com',
            subject: "Pipeline Job ${currentBuild.fullDisplayName} has FINISHED SUCCESSFULY",
            body: "CONGRATULATIONS! The pipeline job ${currentBuild.fullDisplayName} on ${env.BUILD_URL} has FINISHED WITHOUT ERRORS"
        }
        failure {
            mail to: 'qastacknotifications@gmail.com',
            subject: "Pipeline Job ${currentBuild.fullDisplayName} has FAILED",
            body: "ALERT! The pipeline job ${currentBuild.fullDisplayName} on ${env.BUILD_URL} has FINISHED WITH ERRORS"
        }*/
        always {
            cleanWs()
        }
    }
}
